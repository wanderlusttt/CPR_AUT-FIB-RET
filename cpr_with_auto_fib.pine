// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© GuruprasadMeduri & Wanderlusttt
//@version=5

indicator('CPR + Auto Fibonacci Retracement', overlay = true)
//***************GUIDE***********************************
//CPR - Applicable only for daily pivots
//CPR - All 3 lines display enabled by default
//CPR - Central Pivot line display cannot changed
//CPR - Central Pivot is a blue line by default and can be changed from settings
//CPR - Top Range & Bottom Ranage display can be changed from settings
//CPR - Top Range & Bottom Ranage are  Yellow lines by default and can be chaned from settings
//Daily pivots - Pivot line and CPR Central line are same
//Daily pivots - level 1 & 2 (S1, R1, S2  R2) display enabled by default and can be changed from settings
//Daily pivots - level 3 (S3 & R3) is availale and can be seleted from settings
//Daily pivots - Resistance(R) lines are Red lines and can be changed from settings
//Daily pivots - Support(S) lines are Green lines and can be changed from settings
//Weekly pivots - Pivot is a blue line by default and can be changed from settings
//Weekly pivots - 3 levels (S1, R1, S2, R2, S3 & R3) availale and can be seleted from settings
//Weekly pivots - Resistance(R) lines are crossed (+) Red lines and can be changed from settings
//Weekly pivots - Support(S) lines are crossed (+) Green lines and can be changed from settings
//Monthly pivots - Pivot is a blue line by default and can be changed from settings
//Monthly pivots - 3 levels (S1, R1, S2, R2, S3 & R3) availale and can be seleted from settings
//Monthly pivots - Resistance(R) lines are circled (o) Red lines and can be changed from settings
//Monthly pivots - Support(S) lines are circled (o) Green lines and can be changed from settings


// study("CPR with MAs, Super Trend & VWAP by GuruprasadMeduri", overlay = true, shorttitle="CPR",precision=1)
//******************LOGICS**************************
//central pivot range
pivot = (high + low + close) /3 //Central Povit
BC = (high + low) / 2 //Below Central povit
TC = (pivot - BC) + pivot //Top Central povot

//3  support levels
S1 = (pivot * 2) - high
S2 = pivot - (high - low)
S3 = low - 2 * (high - pivot)

//3  resistance levels
R1 = (pivot * 2) - low
R2 = pivot + (high - low)
R3 = high + 2 * (pivot - low)

//Checkbox inputs
CPRPlot = input(title='Plot CPR?', defval=true)
DayS1R1 = input(title='Plot Daily S1/R1?', defval=true)
DayS2R2 = input(title='Plot Daily S2/R2?', defval=false)
DayS3R3 = input(title='Plot Daily S3/R3?', defval=false)
WeeklyPivotInclude = input(title='Plot Weekly Pivot?', defval=false)
WeeklyS1R1 = input(title='Plot weekly S1/R1?', defval=false)
WeeklyS2R2 = input(title='Plot weekly S2/R2?', defval=false)
WeeklyS3R3 = input(title='Plot weekly S3/R3?', defval=false)
MonthlyPivotInclude = input(title='Plot Monthly Pivot?', defval=false)
MonthlyS1R1 = input(title='Plot Monthly S1/R1?', defval=false)
MonthlyS2R2 = input(title='Plot Monthly S2/R2?', defval=false)
MonthlyS3R3 = input(title='Plot Monthly S3/R3?', defval=false)

//******************DAYWISE CPR & PIVOTS**************************
// Getting daywise CPR
DayPivot = request.security(syminfo.tickerid, 'D', pivot[1], barmerge.gaps_off, barmerge.lookahead_on)
DayBC = request.security(syminfo.tickerid, 'D', BC[1], barmerge.gaps_off, barmerge.lookahead_on)
DayTC = request.security(syminfo.tickerid, 'D', TC[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks daywse for CPR
CPColour = DayPivot != DayPivot[1] ? na : color.blue
BCColour = DayBC != DayBC[1] ? na : color.blue
TCColour = DayTC != DayTC[1] ? na : color.blue

//Plotting daywise CPR
plot(DayPivot, title='CP', color=CPColour, style=plot.style_linebr, linewidth=2)
plot(CPRPlot ? DayBC : na, title='BC', color=BCColour, style=plot.style_line, linewidth=1)
plot(CPRPlot ? DayTC : na, title='TC', color=TCColour, style=plot.style_line, linewidth=1)

// Getting daywise Support levels
DayS1 = request.security(syminfo.tickerid, 'D', S1[1], barmerge.gaps_off, barmerge.lookahead_on)
DayS2 = request.security(syminfo.tickerid, 'D', S2[1], barmerge.gaps_off, barmerge.lookahead_on)
DayS3 = request.security(syminfo.tickerid, 'D', S3[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for daywise Support levels 
DayS1Color = DayS1 != DayS1[1] ? na : color.green
DayS2Color = DayS2 != DayS2[1] ? na : color.green
DayS3Color = DayS3 != DayS3[1] ? na : color.green

//Plotting daywise Support levels
plot(DayS1R1 ? DayS1 : na, title='D-S1', color=DayS1Color, style=plot.style_line, linewidth=1)
plot(DayS2R2 ? DayS2 : na, title='D-S2', color=DayS2Color, style=plot.style_line, linewidth=1)
plot(DayS3R3 ? DayS3 : na, title='D-S3', color=DayS3Color, style=plot.style_line, linewidth=1)

// Getting daywise Resistance levels
DayR1 = request.security(syminfo.tickerid, 'D', R1[1], barmerge.gaps_off, barmerge.lookahead_on)
DayR2 = request.security(syminfo.tickerid, 'D', R2[1], barmerge.gaps_off, barmerge.lookahead_on)
DayR3 = request.security(syminfo.tickerid, 'D', R3[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for daywise Support levels
DayR1Color = DayR1 != DayR1[1] ? na : color.red
DayR2Color = DayR2 != DayR2[1] ? na : color.red
DayR3Color = DayR3 != DayR3[1] ? na : color.red

//Plotting daywise Resistance levels
plot(DayS1R1 ? DayR1 : na, title='D-R1', color=DayR1Color, style=plot.style_line, linewidth=1)
plot(DayS2R2 ? DayR2 : na, title='D-R2', color=DayR2Color, style=plot.style_line, linewidth=1)
plot(DayS3R3 ? DayR3 : na, title='D-R3', color=DayR3Color, style=plot.style_line, linewidth=1)

//******************WEEKLY PIVOTS**************************

// Getting Weekly Pivot
WPivot = request.security(syminfo.tickerid, 'W', pivot[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for Weekly Pivot 
WeeklyPivotColor = WPivot != WPivot[1] ? na : color.blue

//Plotting Weekly Pivot
plot(WeeklyPivotInclude ? WPivot : na, title='W-P', color=WeeklyPivotColor, style=plot.style_circles, linewidth=1)


// Getting Weekly Support levels
WS1 = request.security(syminfo.tickerid, 'W', S1[1], barmerge.gaps_off, barmerge.lookahead_on)
WS2 = request.security(syminfo.tickerid, 'W', S2[1], barmerge.gaps_off, barmerge.lookahead_on)
WS3 = request.security(syminfo.tickerid, 'W', S3[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for weekly Support levels
WS1Color = WS1 != WS1[1] ? na : color.green
WS2Color = WS2 != WS2[1] ? na : color.green
WS3Color = WS3 != WS3[1] ? na : color.green

//Plotting Weekly Support levels
plot(WeeklyS1R1 ? WS1 : na, title='W-S1', color=WS1Color, style=plot.style_cross, linewidth=1)
plot(WeeklyS2R2 ? WS2 : na, title='W-S2', color=WS2Color, style=plot.style_cross, linewidth=1)
plot(WeeklyS3R3 ? WS3 : na, title='W-S3', color=WS3Color, style=plot.style_cross, linewidth=1)

// Getting Weekly Resistance levels
WR1 = request.security(syminfo.tickerid, 'W', R1[1], barmerge.gaps_off, barmerge.lookahead_on)
WR2 = request.security(syminfo.tickerid, 'W', R2[1], barmerge.gaps_off, barmerge.lookahead_on)
WR3 = request.security(syminfo.tickerid, 'W', R3[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for weekly Resistance levels
WR1Color = WR1 != WR1[1] ? na : color.red
WR2Color = WR2 != WR2[1] ? na : color.red
WR3Color = WR3 != WR3[1] ? na : color.red

//Plotting Weekly Resistance levels
plot(WeeklyS1R1 ? WR1 : na, title='W-R1', color=WR1Color, style=plot.style_cross, linewidth=1)
plot(WeeklyS2R2 ? WR2 : na, title='W-R2', color=WR2Color, style=plot.style_cross, linewidth=1)
plot(WeeklyS3R3 ? WR3 : na, title='W-R3', color=WR3Color, style=plot.style_cross, linewidth=1)

//******************MONTHLY PIVOTS**************************

// Getting Monthly Pivot
MPivot = request.security(syminfo.tickerid, 'M', pivot[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for Monthly Support levels 
MonthlyPivotColor = MPivot != MPivot[1] ? na : color.blue

//Plotting  Monthly Pivot
plot(MonthlyPivotInclude ? MPivot : na, title='M-P', color=MonthlyPivotColor, style=plot.style_line, linewidth=1)

// Getting  Monthly Support levels
MS1 = request.security(syminfo.tickerid, 'M', S1[1], barmerge.gaps_off, barmerge.lookahead_on)
MS2 = request.security(syminfo.tickerid, 'M', S2[1], barmerge.gaps_off, barmerge.lookahead_on)
MS3 = request.security(syminfo.tickerid, 'M', S3[1], barmerge.gaps_off, barmerge.lookahead_on)

//Adding linebreaks for Montly Support levels
MS1Color = MS1 != MS1[1] ? na : color.green
MS2Color = MS2 != MS2[1] ? na : color.green
MS3Color = MS3 != MS3[1] ? na : color.green

//Plotting  Monthly Support levels
plot(MonthlyS1R1 ? MS1 : na, title='M-S1', color=MS1Color, style=plot.style_circles, linewidth=1)
plot(MonthlyS2R2 ? MS2 : na, title='M-S2', color=MS2Color, style=plot.style_circles, linewidth=1)
plot(MonthlyS3R3 ? MS3 : na, title='M-S3', color=MS3Color, style=plot.style_circles, linewidth=1)

// Getting  Monthly Resistance levels
MR1 = request.security(syminfo.tickerid, 'M', R1[1], barmerge.gaps_off, barmerge.lookahead_on)
MR2 = request.security(syminfo.tickerid, 'M', R2[1], barmerge.gaps_off, barmerge.lookahead_on)
MR3 = request.security(syminfo.tickerid, 'M', R3[1], barmerge.gaps_off, barmerge.lookahead_on)

MR1Color = MR1 != MR1[1] ? na : color.red
MR2Color = MR2 != MR2[1] ? na : color.red
MR3Color = MR3 != MR3[1] ? na : color.red

//Plotting  Monthly Resistance levels
plot(MonthlyS1R1 ? MR1 : na, title='M-R1', color=MR1Color, style=plot.style_circles, linewidth=1)
plot(MonthlyS2R2 ? MR2 : na, title='M-R2', color=MR2Color, style=plot.style_circles, linewidth=1)
plot(MonthlyS3R3 ? MR3 : na, title='M-R3', color=MR3Color, style=plot.style_circles, linewidth=1)

//*****************************INDICATORs**************************

//SMA
PlotSMA = input(title='Plot SMA?', defval=true)
SMALength = input(title='SMA Length', defval=50)
SMASource = input(title='SMA Source', defval=close)
SMAvg = ta.sma(SMASource, SMALength)
plot(PlotSMA ? SMAvg : na, color=color.new(color.orange, 0), title='SMA')

//EMA
PlotEMA = input(title='Plot EMA?', defval=true)
EMALength = input(title='EMA Length', defval=50)
EMASource = input(title='EMA Source', defval=close)
EMAvg = ta.ema(EMASource, EMALength)
plot(PlotEMA ? EMAvg : na, color=color.new(color.red, 0), title='EMA')

//VWAP
PlotVWAP = input(title='Plot VWAP?', defval=true)
VWAPSource = input(title='VWAP Source', defval=close)
VWAPrice = ta.vwap(VWAPSource)
plot(PlotVWAP ? VWAPrice : na, color=color.new(color.teal, 0), title='VWAP')

//SuperTrend
PlotSTrend = input(title='Plot Super Trend?', defval=true)
InputFactor = input.int(3, minval=1, maxval=100, title='Factor')
InputLength = input.int(10, minval=1, maxval=100, title='Length')
BasicUpperBand = hl2 - (InputFactor * ta.atr(InputLength))
BasicLowerBand = hl2 + (InputFactor * ta.atr(InputLength))
FinalUpperBand = 0.0
FinalLowerBand = 0.0
FinalUpperBand := close[1] > FinalUpperBand[1] ? math.max(BasicUpperBand, FinalUpperBand[1]) : BasicUpperBand
FinalLowerBand := close[1] < FinalLowerBand[1] ? math.min(BasicLowerBand, FinalLowerBand[1]) : BasicLowerBand
IsTrend = 0.0
IsTrend := close > FinalLowerBand[1] ? 1 : close < FinalUpperBand[1] ? -1 : nz(IsTrend[1], 1)
STrendline = IsTrend == 1 ? FinalUpperBand : FinalLowerBand
linecolor = IsTrend == 1 ? color.green : color.red
Plotline = (PlotSTrend ? STrendline : na)
plot(Plotline, color=linecolor, style=plot.style_line, linewidth=1, title='SuperTrend')
PlotShapeUp = ta.cross(close, STrendline) and close > STrendline
PlotShapeDown = ta.cross(STrendline, close) and close < STrendline
plotshape(PlotSTrend ? PlotShapeUp : na, 'Up Arrow', shape.triangleup, location.belowbar, color.new(color.green, 0), 0)
plotshape(PlotSTrend ? PlotShapeDown : na, 'Down Arrow', shape.triangledown, location.abovebar, color.new(color.red, 0), 0)

// Auto Fibonacci Retracement
devTooltip = "Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot."
depthTooltip = "The minimum number of bars that will be taken into account when calculating the indicator."
// pivots threshold
threshold_multiplier = input.float(title="Deviation", defval=3, minval=0, tooltip=devTooltip)
depth = input.int(title="Depth", defval=10, minval=2, tooltip=depthTooltip)
reverse = input(false, "Reverse")
var extendLeft = input(false, "Extend Leftââââ|ââââExtend Right", inline = "Extend Lines")
var extendRight = input(true, "", inline = "Extend Lines")
var extending = extend.none
if extendLeft and extendRight
    extending := extend.both
if extendLeft and not extendRight
    extending := extend.left
if not extendLeft and extendRight
    extending := extend.right
prices = input(true, "Show Prices")
levels = input(true, "Show Levels", inline = "Levels")
levelsFormat = input.string("Values", "", options = ["Values", "Percent"], inline = "Levels")
labelsPosition = input.string("Left", "Labels Position", options = ["Left", "Right"])
var int backgroundTransparency = input.int(85, "Background Transparency", minval = 0, maxval = 100)

import TradingView/ZigZag/7 as zigzag

update()=>
    var settings = zigzag.Settings.new(threshold_multiplier, depth, color(na), false, false, false, false, "Absolute", true)
    var zigzag.ZigZag zigZag = zigzag.newInstance(settings)
    var zigzag.Pivot lastP = na
    var float startPrice = na
    var float height = na
    settings.devThreshold := ta.atr(10) / close * 100 * threshold_multiplier
    if zigZag.update()
        lastP := zigZag.lastPivot()
        if not na(lastP)
            var line lineLast = na
            if na(lineLast)
                lineLast := line.new(lastP.start, lastP.end, xloc=xloc.bar_time, color=color.gray, width=1, style=line.style_dashed)
            else
                line.set_first_point(lineLast, lastP.start)
                line.set_second_point(lineLast, lastP.end)

            startPrice := reverse ? lastP.start.price : lastP.end.price
            endPrice = reverse ? lastP.end.price : lastP.start.price
            height := (startPrice > endPrice ? -1 : 1) * math.abs(startPrice - endPrice)
    [lastP, startPrice, height]

[lastP, startPrice, height] = update()

_draw_line(price, col) =>
    var id = line.new(lastP.start.time, lastP.start.price, time, price, xloc=xloc.bar_time, color=col, width=1, extend=extending)
    line.set_xy1(id, lastP.start.time, price)
    line.set_xy2(id, lastP.end.time, price)
	id


_draw_label(price, txt, txtColor) =>
    x = labelsPosition == "Left" ? lastP.start.time : not extendRight ? lastP.end.time : time
    labelStyle = labelsPosition == "Left" ? label.style_label_right : label.style_label_left
    align = labelsPosition == "Left" ? text.align_right : text.align_left
    labelsAlignStrLeft = txt + '\n â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â \n'
    labelsAlignStrRight = '       ' + txt + '\n â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â \n'
    labelsAlignStr = labelsPosition == "Left" ? labelsAlignStrLeft : labelsAlignStrRight
    var id = label.new(x=x, y=price, xloc=xloc.bar_time, text=labelsAlignStr, textcolor=txtColor, style=labelStyle, textalign=align, color=#00000000)
    label.set_xy(id, x, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)

_wrap(txt) =>
    "(" + str.tostring(txt, format.mintick) + ")"

_label_txt(level, price) =>
    l = levelsFormat == "Values" ? str.tostring(level) : str.tostring(level * 100) + "%"
    (levels ? l : "") + (prices ? _wrap(price) : "")

_crossing_level(series float sr, series float r) =>
    (r > sr and r < sr[1]) or (r < sr and r > sr[1])

processLevel(bool show, float value, color colorL, line lineIdOther) =>
    float m = value
	r = startPrice + height * m
    crossed = _crossing_level(close, r)
    if show and not na(lastP)
		lineId = _draw_line(r, colorL)
        _draw_label(r, _label_txt(m, r), colorL)
        if crossed
            alert("Autofib: " + syminfo.ticker + " crossing level " + str.tostring(value))
        if not na(lineIdOther)
            linefill.new(lineId, lineIdOther, color = color.new(colorL, backgroundTransparency))
		lineId
    else
		lineIdOther

show_0 = input(true, "", inline = "Level0")
value_0 = input(0, "", inline = "Level0")
color_0 = input(#787b86, "", inline = "Level0")

show_0_236 = input(true, "", inline = "Level0")
value_0_236 = input(0.236, "", inline = "Level0")
color_0_236 = input(#f44336, "", inline = "Level0")

show_0_382 = input(true, "", inline = "Level1")
value_0_382 = input(0.382, "", inline = "Level1")
color_0_382 = input(#81c784, "", inline = "Level1")

show_0_5 = input(true, "", inline = "Level1")
value_0_5 = input(0.5, "", inline = "Level1")
color_0_5 = input(#4caf50, "", inline = "Level1")

show_0_618 = input(true, "", inline = "Level2")
value_0_618 = input(0.618, "", inline = "Level2")
color_0_618 = input(#009688, "", inline = "Level2")

show_0_65 = input(false, "", inline = "Level2")
value_0_65 = input(0.65, "", inline = "Level2")
color_0_65 = input(#009688, "", inline = "Level2")

show_0_786 = input(true, "", inline = "Level3")
value_0_786 = input(0.786, "", inline = "Level3")
color_0_786 = input(#64b5f6, "", inline = "Level3")

show_1 = input(true, "", inline = "Level3")
value_1 = input(1, "", inline = "Level3")
color_1 = input(#787b86, "", inline = "Level3")

show_1_272 = input(false, "", inline = "Level4")
value_1_272 = input(1.272, "", inline = "Level4")
color_1_272 = input(#81c784, "", inline = "Level4")

show_1_414 = input(false, "", inline = "Level4")
value_1_414 = input(1.414, "", inline = "Level4")
color_1_414 = input(#f44336, "", inline = "Level4")

show_1_618 = input(true, "", inline = "Level5")
value_1_618 = input(1.618, "", inline = "Level5")
color_1_618 = input(#2962ff, "", inline = "Level5")

show_1_65 = input(false, "", inline = "Level5")
value_1_65 = input(1.65, "", inline = "Level5")
color_1_65 = input(#2962ff, "", inline = "Level5")

show_2_618 = input(true, "", inline = "Level6")
value_2_618 = input(2.618, "", inline = "Level6")
color_2_618 = input(#f44336, "", inline = "Level6")

show_2_65 = input(false, "", inline = "Level6")
value_2_65 = input(2.65, "", inline = "Level6")
color_2_65 = input(#f44336, "", inline = "Level6")

show_3_618 = input(true, "", inline = "Level7")
value_3_618 = input(3.618, "", inline = "Level7")
color_3_618 = input(#9c27b0, "", inline = "Level7")

show_3_65 = input(false, "", inline = "Level7")
value_3_65 = input(3.65, "", inline = "Level7")
color_3_65 = input(#9c27b0, "", inline = "Level7")

show_4_236 = input(true, "", inline = "Level8")
value_4_236 = input(4.236, "", inline = "Level8")
color_4_236 = input(#e91e63, "", inline = "Level8")

show_4_618 = input(false, "", inline = "Level8")
value_4_618 = input(4.618, "", inline = "Level8")
color_4_618 = input(#81c784, "", inline = "Level8")

show_neg_0_236 = input(false, "", inline = "Level9")
value_neg_0_236 = input(-0.236, "", inline = "Level9")
color_neg_0_236 = input(#f44336, "", inline = "Level9")

show_neg_0_382 = input(false, "", inline = "Level9")
value_neg_0_382 = input(-0.382, "", inline = "Level9")
color_neg_0_382 = input(#81c784, "", inline = "Level9")

show_neg_0_618 = input(false, "", inline = "Level10")
value_neg_0_618 = input(-0.618, "", inline = "Level10")
color_neg_0_618 = input(#009688, "", inline = "Level10")

show_neg_0_65 = input(false, "", inline = "Level10")
value_neg_0_65 = input(-0.65, "", inline = "Level10")
color_neg_0_65 = input(#009688, "", inline = "Level10")


lineId0 = processLevel(show_neg_0_65, value_neg_0_65, color_neg_0_65, line(na))
lineId1 = processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618, lineId0)
lineId2 = processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382, lineId1)
lineId3 = processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236, lineId2)
lineId4 = processLevel(show_0, value_0, color_0, lineId3)
lineId5 = processLevel(show_0_236, value_0_236, color_0_236, lineId4)
lineId6 = processLevel(show_0_382, value_0_382, color_0_382, lineId5)
lineId7 = processLevel(show_0_5, value_0_5, color_0_5, lineId6)
lineId8 = processLevel(show_0_618, value_0_618, color_0_618, lineId7)
lineId9 = processLevel(show_0_65, value_0_65, color_0_65, lineId8)
lineId10 = processLevel(show_0_786, value_0_786, color_0_786, lineId9)
lineId11 = processLevel(show_1, value_1, color_1, lineId10)
lineId12 = processLevel(show_1_272, value_1_272, color_1_272, lineId11)
lineId13 = processLevel(show_1_414, value_1_414, color_1_414, lineId12)
lineId14 = processLevel(show_1_618, value_1_618, color_1_618, lineId13)
lineId15 = processLevel(show_1_65, value_1_65, color_1_65, lineId14)
lineId16 = processLevel(show_2_618, value_2_618, color_2_618, lineId15)
lineId17 = processLevel(show_2_65, value_2_65, color_2_65, lineId16)
lineId18 = processLevel(show_3_618, value_3_618, color_3_618, lineId17)
lineId19 = processLevel(show_3_65, value_3_65, color_3_65, lineId18)
lineId20 = processLevel(show_4_236, value_4_236, color_4_236, lineId19)
lineId21 = processLevel(show_4_618, value_4_618, color_4_618, lineId20)
